/*
  问：给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

  （比根节点小的都在左侧，比根节点大的在右侧）

  设n个节点存在二叉排序树的个数是G(n)
  那么G(n)=f(1)+f(2)+f(3)+f(4)+...+f(n)；

  设f(i)为以i为根的二叉搜索树的个数
  因为是二叉搜索树，左边的子节点，都要比i小，共有i-1个；右边子节点，都要比i大，共n-i个
  那么f(i)=G(i-1)*G(n-1)；

  所以带入得

  G(n)=G(0)*G(n-1)+G(1)*G(n-2)+ ... +G(n-1)*G(0)

*/

function numTrees(n) {
  // 因为是从1到n，所以增加G(0)占位
  const G = new Array(n + 1).fill(0);

  // 有0个或1个节点时，组成的二叉树只有1种
  G[0] = G[1] = 1;

  for(let i = 2; i < n+1; i++) {
    for(let j = 1; j < i+1; j++) {
      G[i] += G[i-1] * G[i-j];
    }
  }

  return G[n];
}